name: CI/CD & Launch Readiness

on:
  push:
    branches:
      - main
      - release/**
  pull_request:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for promotion'
        required: false
        default: 'staging'
        type: choice
        options:
          - dev
          - staging
          - prod
      promote:
        description: 'Promote artefacts after passing readiness checks'
        required: false
        default: 'false'
        type: boolean
      run_migrations:
        description: 'Run schema orchestrator during promotion'
        required: false
        default: 'true'
        type: boolean
      run_api_e2e_staging:
        description: 'Execute API E2E suite against staging endpoints during this run'
        required: false
        default: 'false'
        type: boolean
      staging_base_url:
        description: 'Optional override for staging API base URL (include /staging path)'
        required: false
        default: ''
        type: string

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.4'

jobs:
  quality:
    name: Quality Gates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm --filter @namecard/shared run prisma:generate

      - name: Start database for integration tests
        run: |
          docker compose up -d postgres_test
          for attempt in {1..15}; do
            if docker compose exec -T postgres_test pg_isready -U namecard_user -d namecard_test >/dev/null 2>&1; then
              exit 0
            fi
            sleep 2
          done
          echo "Postgres container did not become ready in time" >&2
          docker compose logs postgres_test
          exit 1

      - name: Verify database connectivity
        run: |
          docker compose exec -T postgres_test psql -U namecard_user -d namecard_test -c 'select 1'

      - name: Verify host connectivity
        run: |
          docker run --rm --network host postgres:15-alpine pg_isready -h 127.0.0.1 -p 5433 -U namecard_user -d namecard_test

      - name: Run lint/type/test/build
        run: pnpm run ci:quality

  web_e2e_smoke:
    name: Web E2E Smoke
    needs: quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm --filter @namecard/shared run prisma:generate

      - name: Start database for smoke tests
        run: |
          docker compose up -d postgres_test
          for attempt in {1..15}; do
            if docker compose exec -T postgres_test pg_isready -U namecard_user -d namecard_test >/dev/null 2>&1; then
              exit 0
            fi
            sleep 2
          done
          echo "Postgres container did not become ready in time" >&2
          docker compose logs postgres_test
          exit 1

      - name: Verify database connectivity
        run: |
          docker compose exec -T postgres_test psql -U namecard_user -d namecard_test -c 'select 1'

      - name: Prepare smoke artefacts directory
        run: mkdir -p tests/web-e2e/artifacts

      - name: Run web smoke suite
        env:
          WEB_E2E_AUTOSTART_DEV_SERVER: '1'
          WEB_E2E_AUTOSTART_API_SANDBOX: '1'
        run: pnpm --filter @namecard/web-e2e run test:smoke

      - name: Upload web smoke artefacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: web-e2e-smoke-artifacts
          path: tests/web-e2e/artifacts
          if-no-files-found: warn

  api_e2e:
    name: API E2E
    needs: quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm --filter @namecard/shared run prisma:generate

      - name: Start database for API E2E tests
        run: |
          docker compose up -d postgres
          for attempt in {1..15}; do
            if docker compose exec -T postgres pg_isready -U namecard_user -d namecard_dev >/dev/null 2>&1; then
              exit 0
            fi
            sleep 2
          done
          echo "Postgres container did not become ready in time" >&2
          docker compose logs postgres
          exit 1

      - name: Apply local migrations
        run: pnpm run migrate:local

      - name: Build shared package
        run: pnpm --filter @namecard/shared run build

      - name: Run API E2E suite
        run: |
          set -eo pipefail
          pnpm run test:e2e:api:local | tee api-e2e.log

      - name: Collect docker logs on failure
        if: failure()
        run: docker compose logs postgres > api-e2e-docker.log || true

      - name: Upload API E2E artefacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: api-e2e-artifacts
          path: |
            api-e2e.log
            api-e2e-docker.log

      - name: Cleanup containers
        if: always()
        run: docker compose down -v

  api_e2e_staging:
    name: API E2E (Staging)
    needs:
      - api_e2e
    if: ${{ (github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/'))) || (github.event_name == 'workflow_dispatch' && github.event.inputs.run_api_e2e_staging == 'true') }}
    runs-on: ubuntu-latest
    environment: staging
    env:
      API_E2E_BASE_URL_STAGING_SECRET: ${{ secrets.API_E2E_BASE_URL_STAGING }}
      API_E2E_STAGE_API_KEY_SECRET: ${{ secrets.API_E2E_STAGE_API_KEY }}
      API_E2E_BASE_URL_STAGING_VAR: ${{ vars.API_E2E_BASE_URL_STAGING }}
      API_E2E_STAGE_API_KEY_VAR: ${{ vars.API_E2E_STAGE_API_KEY }}
      AWS_API_E2E_ACCESS_KEY_ID: ${{ secrets.AWS_API_E2E_ACCESS_KEY_ID }}
      AWS_API_E2E_SECRET_ACCESS_KEY: ${{ secrets.AWS_API_E2E_SECRET_ACCESS_KEY }}
      STAGING_BASE_URL_INPUT: ${{ inputs.staging_base_url }}
      STAGING_BASE_URL_FALLBACK: https://frepw21wc8.execute-api.ap-southeast-1.amazonaws.com/staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure AWS credentials
        if: ${{ env.AWS_API_E2E_ACCESS_KEY_ID != '' && env.AWS_API_E2E_SECRET_ACCESS_KEY != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_API_E2E_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_API_E2E_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Run staging API E2E suite
        env:
          API_E2E_STAGE_API_KEY: ${{ env.API_E2E_STAGE_API_KEY_SECRET != '' && env.API_E2E_STAGE_API_KEY_SECRET || env.API_E2E_STAGE_API_KEY_VAR }}
        run: |
          set -eo pipefail

          BASE_URL="$API_E2E_BASE_URL_STAGING_SECRET"
          if [ -z "$BASE_URL" ]; then
            BASE_URL="$API_E2E_BASE_URL_STAGING_VAR"
          fi
          if [ -z "$BASE_URL" ]; then
            BASE_URL="$STAGING_BASE_URL_INPUT"
          fi
          if [ -z "$BASE_URL" ]; then
            BASE_URL="$STAGING_BASE_URL_FALLBACK"
          fi

          if [ -z "$BASE_URL" ]; then
            echo "API_E2E_BASE_URL_STAGING is required for staging runs" | tee api-e2e-staging.log
            exit 1
          fi

          export API_E2E_BASE_URL_STAGING="$BASE_URL"
          echo "Using staging base URL: $API_E2E_BASE_URL_STAGING"

          pnpm run test:e2e:api:staging -- --base-url "$API_E2E_BASE_URL_STAGING" | tee api-e2e-staging.log

      - name: Upload staging artefacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: api-e2e-staging-artifacts
          path: api-e2e-staging.log

  infrastructure_dry_run:
    name: Infrastructure Dry Run
    needs:
      - quality
      - api_e2e
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm --filter @namecard/shared run prisma:generate

      - name: Start database for migration validation
        run: |
          docker compose up -d postgres
          for attempt in {1..15}; do
            if docker compose exec -T postgres pg_isready -U namecard_user -d namecard_dev >/dev/null 2>&1; then
              exit 0
            fi
            sleep 2
          done
          echo "Postgres test container did not become ready in time" >&2
          docker compose logs postgres
          exit 1

      - name: Migrations & schema orchestrator dry run
        run: pnpm run ci:infra-dry-run

  launch_readiness:
    name: Launch Readiness Verification
    needs: infrastructure_dry_run
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies (no scripts)
        run: pnpm install --frozen-lockfile --ignore-scripts

      - name: Generate Prisma client
        run: pnpm --filter @namecard/shared run prisma:generate

      - name: Verify launch readiness artefacts
        run: pnpm run launch:verify

  promote:
    name: Promote Artefacts
    needs: launch_readiness
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.promote == 'true')
    runs-on: ubuntu-latest
    env:
      TARGET_ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
      RUN_MIGRATIONS: ${{ github.event.inputs.run_migrations || 'true' }}
      AWS_REGION: ap-southeast-1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Resolve deployment environment
        run: |
          target="${{ env.TARGET_ENVIRONMENT }}"
          if [ -z "$target" ]; then
            target="staging"
          fi

          case "$target" in
            dev|development)
              stack_suffix="development"
              config_env="dev"
              ;;
            prod|production)
              stack_suffix="production"
              config_env="prod"
              ;;
            staging)
              stack_suffix="staging"
              config_env="staging"
              ;;
            *)
              echo "Unsupported TARGET_ENVIRONMENT '$target'" >&2
              exit 1
              ;;
          esac

          echo "TARGET_ENVIRONMENT_NORMALIZED=$target" >> "$GITHUB_ENV"
          echo "STACK_ENVIRONMENT=$stack_suffix" >> "$GITHUB_ENV"
          echo "CONFIG_ENVIRONMENT=$config_env" >> "$GITHUB_ENV"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm --filter @namecard/shared run prisma:generate

      - name: Build infrastructure package
        run: pnpm --filter @namecard/infra run build

      - name: Deploy API stack with migrations
        run: |
          pnpm --filter @namecard/infra exec cdk deploy \
            NameCardDb-${STACK_ENVIRONMENT} \
            NameCardApi-${STACK_ENVIRONMENT} \
            --require-approval never \
            --context environment=${CONFIG_ENVIRONMENT} \
            --context migrationsVersion=${GITHUB_SHA}

      - name: Summarise promotion
        run: |
          echo "Promoting commit ${GITHUB_SHA} to ${TARGET_ENVIRONMENT}" \
            && echo "run_migrations=${RUN_MIGRATIONS}"

      - name: Record deployment metadata
        run: pnpm run launch:record -- --environment=${{ env.TARGET_ENVIRONMENT }} --commit=${GITHUB_SHA} --run-migrations=${{ env.RUN_MIGRATIONS }}

  web_e2e_online:
    name: Hosted Web E2E Smoke
    needs: promote
    if: needs.promote.result == 'success'
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: '20'
      PNPM_VERSION: '8.15.4'
      HOSTED_WEB_BASE_URL: ${{ secrets.HOSTED_WEB_BASE_URL }}
      HOSTED_API_BASE_URL: ${{ secrets.HOSTED_API_BASE_URL }}
      HOSTED_E2E_EMAIL: ${{ secrets.HOSTED_E2E_EMAIL }}
      HOSTED_E2E_PASSWORD: ${{ secrets.HOSTED_E2E_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm --filter @namecard/shared run prisma:generate

      - name: Seed hosted smoke fixtures
        env:
          WEB_E2E_API_BASE_URL: ${{ env.HOSTED_API_BASE_URL }}
          E2E_EMAIL: ${{ env.HOSTED_E2E_EMAIL }}
          E2E_PASSWORD: ${{ env.HOSTED_E2E_PASSWORD }}
        run: pnpm run e2e:seed:online

      - name: Clean previous artifacts
        run: |
          rm -f tests/web-e2e/artifacts/*.png || true
          rm -f tests/web-e2e/artifacts/*.log || true

      - name: Run hosted smoke suite
        env:
          WEB_E2E_AUTH_MODE: bootstrap
          WEB_E2E_SKIP_AUTOSTART: 'true'
          WEB_E2E_SKIP_AUTOSTART_API_SANDBOX: 'true'
          WEB_E2E_API_HEALTH_PATH: '/v1/auth/health'
          WEB_E2E_API_BASE_URL: ${{ env.HOSTED_API_BASE_URL }}
          WEB_BASE_URL: ${{ env.HOSTED_WEB_BASE_URL }}
          E2E_EMAIL: ${{ env.HOSTED_E2E_EMAIL }}
          E2E_PASSWORD: ${{ env.HOSTED_E2E_PASSWORD }}
        run: pnpm --filter @namecard/web-e2e run test:smoke

      - name: Upload smoke artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-e2e-online-artifacts
          path: tests/web-e2e/artifacts
          if-no-files-found: warn
