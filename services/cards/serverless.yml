# Cards Service Configuration
service: namecard-cards-${self:custom.stage}
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-southeast-1
  stage: ${opt:stage, 'staging'}
  environment:
    # Use production runtime for staging/prod to satisfy env schema
    NODE_ENV: production
    STAGE: ${self:custom.stage}
    
    # Database
    DATABASE_URL: ${ssm:/namecard/${self:provider.stage}/database-url}
    # Secrets Manager (for Prisma Lambda client)
    DATABASE_SECRET_ARN: namecard/database/${self:provider.stage}
    API_SECRET_ARN: namecard/api/${self:provider.stage}
    
    # JWT for authentication
    JWT_SECRET: ${ssm:/namecard/${self:provider.stage}/jwt-secret}
    
    # S3 Configuration
    S3_BUCKET_NAME: ${ssm:/namecard/${self:provider.stage}/s3-bucket-name}
    S3_REGION: ${self:provider.region}
    S3_CDN_DOMAIN: ${ssm:/namecard/${self:provider.stage}/s3-cdn-domain}
    
    # Cognito verification (to validate JWTs)
    COGNITO_USER_POOL_ID: ap-southeast-1_bOA22s0Op
    COGNITO_CLIENT_ID: 5s54d0ifpt3frtvut325uglrjp
    COGNITO_REGION: ${self:provider.region}

  iamRoleStatements:
    # RDS Proxy permissions
    - Effect: Allow
      Action:
        - rds-db:connect
      Resource:
        - arn:aws:rds-db:${self:provider.region}:${aws:accountId}:dbuser:*/namecard-lambda-user
    
    # S3 permissions for card images
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
        - s3:ListBucket
      Resource:
        - arn:aws:s3:::${ssm:/namecard/${self:provider.stage}/s3-bucket-name}
        - arn:aws:s3:::${ssm:/namecard/${self:provider.stage}/s3-bucket-name}/*
    
    # SSM Parameter Store permissions
    - Effect: Allow
      Action:
        - ssm:GetParameter
        - ssm:GetParameters
      Resource:
        - arn:aws:ssm:${self:provider.region}:${aws:accountId}:parameter/namecard/${self:provider.stage}/*
    # Secrets Manager for DB/API secrets
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource:
        - arn:aws:secretsmanager:${self:provider.region}:${aws:accountId}:secret:namecard/database/${self:provider.stage}-*
        - arn:aws:secretsmanager:${self:provider.region}:${aws:accountId}:secret:namecard/api/${self:provider.stage}-*

functions:
  health:
    handler: health-lite.handler
    description: Health check endpoint
    events:
      - http:
          path: health
          method: get
          cors: true

  create:
    handler: handlers/create.handler
    description: Create a new business card
    events:
      - http:
          path: ''
          method: post
          cors: true
    provisionedConcurrency: ${self:custom.provisionedConcurrency.${self:provider.stage}, 0}

  list:
    handler: list.handler
    description: List user's business cards
    vpc:
      securityGroupIds:
        - sg-0af0106683e7a0f5f
      subnetIds:
        - subnet-0403b9e9f399616f7
        - subnet-04b6efe73095e9358
    events:
      - http:
          path: ''
          method: get
          cors: true
    provisionedConcurrency: ${self:custom.provisionedConcurrency.${self:provider.stage}, 0}

  get:
    handler: get-by-id.handler
    description: Get a specific business card
    vpc:
      securityGroupIds:
        - sg-0af0106683e7a0f5f
      subnetIds:
        - subnet-0403b9e9f399616f7
        - subnet-04b6efe73095e9358
    events:
      - http:
          path: '{id}'
          method: get
          cors: true

  update:
    handler: handlers/update.handler
    description: Update a business card
    events:
      - http:
          path: '{id}'
          method: put
          cors: true

  delete:
    handler: handlers/delete.handler
    description: Delete a business card
    events:
      - http:
          path: '{id}'
          method: delete
          cors: true

  search:
    handler: handlers/search.handler
    description: Search business cards
    events:
      - http:
          path: search
          method: get
          cors: true

plugins:
  - serverless-esbuild

custom:
  stage: ${opt:stage, 'staging'}
  esbuild:
    bundle: true
    minify: true
    sourcemap: false
    target: node18
    platform: node
    external:
      - aws-sdk
      - '@prisma/client'
      - '.prisma/client'
    keepOutputDirectory: false
    packager: npm
    concurrency: 3
    define:
      'process.env.NODE_ENV': '"production"'
  
  # Provisioned concurrency by stage
  provisionedConcurrency:
    production: 2
    staging: 0
    development: 0
    local: 0

package:
  patterns:
    - 'node_modules/@prisma/client/**'
    - 'node_modules/.prisma/**'
    - '!**/*.ts'
    - '!**/*.map'
    - '!**/.git/**'
    - '!**/test/**'
    - '!**/scripts/**'
