# Enrichment Service Configuration
service: namecard-enrichment-${self:custom.stage}
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-southeast-1
  stage: ${opt:stage, 'staging'}
  profile: namecard-staging
  timeout: 60
  memorySize: 1024
  logRetentionInDays: ${self:custom.logRetention.${self:custom.stage}, 7}
  environment:
    NODE_ENV: production
    STAGE: ${self:custom.stage}
    LOG_LEVEL: ${self:custom.logLevel.${self:custom.stage}, 'debug'}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'

    DATABASE_SECRET_ARN: namecard/database/${self:custom.stage}
    API_SECRET_ARN: namecard/api/${self:custom.stage}

    PERPLEXITY_API_KEY: ${env:PERPLEXITY_API_KEY, ''}
    PERPLEXITY_BASE_URL: ${ssm:/namecard/${self:custom.stage}/perplexity-base-url, 'https://api.perplexity.ai'}
    PERPLEXITY_RATE_LIMIT_RPM: ${ssm:/namecard/${self:custom.stage}/perplexity-rate-limit-rpm, '60'}
    PERPLEXITY_RATE_LIMIT_RPD: ${ssm:/namecard/${self:custom.stage}/perplexity-rate-limit-rpd, '1000'}
    PERPLEXITY_TIMEOUT: ${ssm:/namecard/${self:custom.stage}/perplexity-timeout, '30000'}
    PERPLEXITY_MAX_RETRIES: ${ssm:/namecard/${self:custom.stage}/perplexity-max-retries, '2'}
    PERPLEXITY_BACKOFF_MS: ${ssm:/namecard/${self:custom.stage}/perplexity-backoff-ms, '3000'}

    ENRICHMENT_ENABLED_SOURCES: ${ssm:/namecard/${self:custom.stage}/enrichment-enabled-sources, 'perplexity'}
    PERPLEXITY_ENABLED: ${ssm:/namecard/${self:custom.stage}/perplexity-enabled, 'true'}
    PERPLEXITY_WEIGHT: ${ssm:/namecard/${self:custom.stage}/perplexity-weight, '0.9'}
    PERPLEXITY_TRUST_LEVEL: ${ssm:/namecard/${self:custom.stage}/perplexity-trust-level, '88'}

    COGNITO_USER_POOL_ID: ap-southeast-1_bOA22s0Op
    COGNITO_CLIENT_ID: 5s54d0ifpt3frtvut325uglrjp
    COGNITO_REGION: ${self:provider.region}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - arn:aws:secretsmanager:${self:provider.region}:${aws:accountId}:secret:namecard/database/${self:custom.stage}-*
            - arn:aws:secretsmanager:${self:provider.region}:${aws:accountId}:secret:namecard/api/${self:custom.stage}-*

        - Effect: Allow
          Action:
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:SendMessage
            - sqs:GetQueueAttributes
          Resource:
            - arn:aws:sqs:${self:provider.region}:${aws:accountId}:namecard-enrichment-queue-${self:custom.stage}

        - Effect: Allow
          Action:
            - sns:Publish
          Resource:
            - arn:aws:sns:${self:provider.region}:${aws:accountId}:namecard-enrichment-complete-${self:custom.stage}

        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
          Resource:
            - arn:aws:ssm:${self:provider.region}:${aws:accountId}:parameter/namecard/${self:custom.stage}/*

custom:
  stage: ${opt:stage, 'staging'}
  logLevel:
    production: info
    staging: debug
    development: debug
    local: debug
  logRetention:
    production: 30
    staging: 7
    development: 7
    local: 7
  esbuild:
    bundle: true
    minify: true
    sourcemap: false
    target: node18
    platform: node
    external:
      - aws-sdk
      - '@prisma/client'
      - '.prisma/client'
    keepOutputDirectory: false
    packager: npm
    concurrency: 3
    define:
      'process.env.NODE_ENV': '"production"'

functions:
  health:
    handler: health.handler
    description: Enrichment service health check
    events:
      - http:
          path: health
          method: get
          cors: true

  sources:
    handler: sources.handler
    description: List available enrichment sources
    events:
      - http:
          path: sources
          method: get
          cors: true

plugins:
  - serverless-esbuild
  - ../../serverless-offline.cjs

resources:
  Resources:
    EnrichmentLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/namecard-enrichment-${self:custom.stage}
        RetentionInDays: ${self:custom.logRetention.${self:custom.stage}, 7}

  Outputs:
    EnrichmentServiceName:
      Description: Enrichment service name
      Value: ${self:service}
      Export:
        Name: ${self:service}-name

package:
  individually: true
  patterns:
    - 'node_modules/@prisma/client/**'
    - 'node_modules/.prisma/**'
    - '!**/*.ts'
    - '!**/*.map'
    - '!**/.git/**'
    - '!**/test/**'
    - '!**/scripts/**'
