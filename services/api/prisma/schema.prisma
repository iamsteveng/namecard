// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile data
model User {
  id          String @id @default(cuid())
  cognitoId   String @unique @map("cognito_id")
  email       String @unique
  name        String?
  avatarUrl   String? @map("avatar_url")
  preferences Json    @default("{}")
  
  // Relations
  cards Card[]
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

// Main card model for business card information
model Card {
  id                  String  @id @default(cuid())
  userId              String  @map("user_id")
  originalImageUrl    String  @map("original_image_url")
  processedImageUrl   String? @map("processed_image_url")
  extractedText       String? @map("extracted_text")
  confidence          Float?  @db.Real
  
  // Extracted information fields
  name     String?
  title    String?
  company  String?
  email    String?
  phone    String?
  address  String?
  website  String?
  
  // Metadata and enrichment
  notes                 String?
  tags                  String[]
  scanDate              DateTime? @map("scan_date") @db.Date
  lastEnrichmentDate    DateTime? @map("last_enrichment_date")
  
  // Full-text search vector (auto-populated by database triggers)
  searchVector          Unsupported("tsvector")? @map("search_vector")
  
  // Relations
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  companies      CardCompany[]
  calendarEvents CalendarEvent[]
  enrichments    CardEnrichment[]  // Track card-level enrichments
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("cards")
  @@index([userId])
  @@index([company])
  @@index([name])
  @@index([email])
  @@index([scanDate])
}

// Company information for data enrichment
model Company {
  id           String  @id @default(cuid())
  name         String  @unique
  domain       String? @unique // Primary domain for API lookups
  industry     String?
  size         String?
  headquarters String?
  location     String? // Full address/location
  website      String?
  description  String?
  logoUrl      String? @map("logo_url")
  
  // Enhanced enrichment data (merged from all sources)
  founded           Int?      // Year founded
  employeeCount     Int?      @map("employee_count")
  annualRevenue     String?   @map("annual_revenue") // e.g., "$1M-$10M"
  funding           String?   // Funding stage/amount
  technologies      String[]  // Tech stack used
  keywords          String[]  // Industry keywords/tags
  
  // Social media and external links
  linkedinUrl       String?   @map("linkedin_url")
  twitterHandle     String?   @map("twitter_handle")
  facebookUrl       String?   @map("facebook_url")
  
  // Overall enrichment status
  overallEnrichmentScore Float? @default(0.0) @map("overall_enrichment_score") @db.Real // 0-100 confidence
  lastEnrichmentDate DateTime? @map("last_enrichment_date")
  
  // Full-text search vector (auto-populated by database triggers)
  searchVector          Unsupported("tsvector")? @map("search_vector")
  
  // Relations
  cards        CardCompany[]
  newsArticles NewsArticle[]
  enrichments  CompanyEnrichment[] // Multiple enrichment sources
  
  lastUpdated DateTime @default(now()) @map("last_updated")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("companies")
  @@index([name])
  @@index([domain])
}

// Track enrichment from multiple sources
model CompanyEnrichment {
  id               String @id @default(cuid())
  companyId        String @map("company_id")
  source           String // 'clearbit', 'linkedin', 'crunchbase', 'manual'
  status           String @default("pending") // 'pending', 'enriched', 'failed', 'partial'
  confidence       Float? @default(0.0) @db.Real // 0-100 confidence for this source
  
  // Raw data from this source (JSON)
  rawData          Json?  @map("raw_data")
  
  // Source-specific metadata
  sourceId         String? @map("source_id") // External ID from the source
  apiVersion       String? @map("api_version")
  rateLimitInfo    Json?   @map("rate_limit_info")
  
  // Processing info
  enrichedAt       DateTime? @map("enriched_at")
  errorMessage     String?   @map("error_message")
  retryCount       Int       @default(0) @map("retry_count")
  nextRetryAt      DateTime? @map("next_retry_at")
  
  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("company_enrichments")
  @@unique([companyId, source])
  @@index([status])
  @@index([enrichedAt])
}

// Track card-level enrichment requests and results
model CardEnrichment {
  id               String @id @default(cuid())
  cardId           String @map("card_id")
  enrichmentType   String @map("enrichment_type") // 'company', 'person', 'social', 'news'
  status           String @default("pending") // 'pending', 'completed', 'failed', 'skipped'
  
  // Enrichment results summary
  companiesFound   Int    @default(0) @map("companies_found")
  dataPointsAdded  Int    @default(0) @map("data_points_added")
  confidence       Float? @default(0.0) @db.Real
  
  // Processing info
  triggeredBy      String  // 'auto', 'manual', 'batch'
  enrichedAt       DateTime? @map("enriched_at")
  errorMessage     String?   @map("error_message")
  processingTimeMs Int?      @map("processing_time_ms")
  
  // Relations
  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("card_enrichments")
  @@index([cardId])
  @@index([status])
  @@index([enrichmentType])
}

// Junction table for card-company relationships
model CardCompany {
  cardId    String @map("card_id")
  companyId String @map("company_id")
  
  card    Card    @relation(fields: [cardId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([cardId, companyId])
  @@map("card_companies")
}

// Calendar events for meeting context
model CalendarEvent {
  id               String    @id @default(cuid())
  cardId           String    @map("card_id")
  externalEventId  String?   @map("external_event_id")
  title            String
  eventDate        DateTime? @map("event_date")
  location         String?
  attendees        String[]
  source           String    // 'google', 'outlook', 'manual'
  
  // Relations
  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now()) @map("created_at")

  @@map("calendar_events")
}

// News articles for company research
model NewsArticle {
  id            String    @id @default(cuid())
  companyId     String    @map("company_id")
  title         String
  summary       String?
  url           String?
  publishedDate DateTime? @map("published_date")
  source        String?
  
  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now()) @map("created_at")

  @@map("news_articles")
  @@index([companyId, publishedDate(sort: Desc)])
}