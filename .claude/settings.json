{
  "permissions": {
    "allow": [
      "Bash(ls:*)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(find:*)",
      "Bash(mkdir:*)",
      "Bash(npm install)",
      "Bash(npx turbo:*)",
      "Bash(npm install:*)",
      "Bash(npm run format:check:*)",
      "Bash(mv:*)",
      "Bash(npm run format:*)",
      "Bash(npm run lint)",
      "Bash(npx eslint:*)",
      "Bash(npm ls:*)",
      "Bash(prettier --check \"**/*.{ts,tsx,js,jsx,json,md}\")",
      "Bash(npx prettier:*)",
      "Bash(npm test)",
      "Bash(npx cypress:*)",
      "Bash(npm run test:coverage:*)",
      "Bash(npm run test:watch:*)",
      "Bash(npm run test:*)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run type-check:*)",
      "Bash(npm run lint:*)",
      "Bash(gh repo view:*)",
      "Bash(git remote add:*)",
      "Bash(git push:*)",
      "Bash(brew install:*)",
      "Bash(gh auth:*)",
      "Bash(npm run build:*)",
      "Bash(npm run:*)",
      "Bash(docker:*)",
      "Bash(npx prisma:*)",
      "Bash(cp:*)",
      "Bash(npx tsx:*)",
      "Bash(DATABASE_URL=\"postgresql://namecard_user:namecard_password@localhost:5432/namecard_test\" npx prisma migrate deploy)",
      "Bash(npm start)",
      "Bash(curl:*)",
      "Bash(cat:*)",
      "Bash(timeout 30 npm run test:*)",
      "Bash(git restore:*)",
      "Bash(cdk init:*)",
      "Bash(aws sts get-caller-identity:*)",
      "Bash(cdk:*)",
      "Bash(aws configure:*)",
      "Bash(openssl rand:*)",
      "Bash(export:*)",
      "Bash(__NEW_LINE__ echo \"üîç Testing AWS Textract OCR Integration\")",
      "Bash(rm:*)",
      "Bash(git pull:*)",
      "Bash(aws s3 ls:*)",
      "Bash(npm test:*)",
      "Bash(aws s3api get-bucket-policy:*)",
      "Bash(aws iam list-attached-user-policies:*)",
      "Bash(pkill:*)",
      "Bash(kill:*)",
      "Bash(git rebase:*)",
      "Bash(git checkout:*)",
      "Bash(git branch:*)",
      "Bash(grep:*)",
      "Bash(true)",
      "Bash(echo:*)",
      "WebFetch(domain:docs.perplexity.ai)",
      "Bash(gh pr create:*)",
      "Bash(gh pr merge:*)",
      "Bash(DATABASE_URL=\"postgresql://namecard_user:namecard_password@localhost:5432/namecard_dev\" npx prisma db push)",
      "Bash(DATABASE_URL=\"postgresql://namecard_user:namecard_password@localhost:5432/namecard_dev\" npx prisma db push --accept-data-loss)",
      "Bash(timeout:*)",
      "Bash(AWS_PROFILE=namecard-staging aws sts get-caller-identity)",
      "Bash(AWS_PROFILE=namecard-staging npm run bootstrap)",
      "Bash(AWS_PROFILE=namecard-staging npm run deploy:staging)",
      "Bash(AWS_PROFILE=namecard-staging npm run deploy:staging -- --require-approval never)",
      "Bash(AWS_PROFILE=namecard-staging aws cloudformation describe-stacks --stack-name NameCardProd-staging --region ap-southeast-1 --query 'Stacks[0].StackStatus')",
      "Bash(AWS_PROFILE=namecard-staging aws cloudformation describe-stack-events --stack-name NameCardProd-staging --region ap-southeast-1 --query 'StackEvents[?ResourceStatus==`CREATE_FAILED`].[ResourceType,LogicalResourceId,ResourceStatusReason]' --output table)",
      "Bash(AWS_PROFILE=namecard-staging aws rds describe-db-engine-versions --engine postgres --query 'DBEngineVersions[?starts_with(EngineVersion,`15`)].EngineVersion' --output table --region ap-southeast-1)",
      "Bash(AWS_PROFILE=namecard-staging aws rds describe-db-engine-versions --engine postgres --query 'DBEngineVersions[?starts_with(EngineVersion,`15`)].EngineVersion' --output table --region ap-southeast-1)",
      "Bash(AWS_PROFILE=namecard-staging aws rds describe-db-engine-versions --engine postgres --query 'DBEngineVersions[?starts_with(EngineVersion,`\"\"15\"\"`)].EngineVersion' --output table --region ap-southeast-1)",
      "Bash(AWS_PROFILE=namecard-staging aws cloudformation delete-stack --stack-name NameCardProd-staging --region ap-southeast-1)",
      "Bash(AWS_PROFILE=namecard-staging aws cloudformation wait stack-delete-complete --stack-name NameCardProd-staging --region ap-southeast-1)",
      "Bash(AWS_PROFILE=namecard-staging aws cloudformation describe-stacks --stack-name NameCardProd-staging --region ap-southeast-1 --query 'Stacks[0].StackStatus' --output text)",
      "Bash(AWS_PROFILE=namecard-staging aws cloudformation describe-stack-events --stack-name NameCardProd-staging --region ap-southeast-1 --query 'StackEvents[?ResourceStatus==`CREATE_FAILED` || ResourceStatus==`UPDATE_FAILED`].[LogicalResourceId,ResourceType,ResourceStatus,ResourceStatusReason]' --output table)",
      "Bash(AWS_PROFILE=namecard-staging aws cloudformation describe-stack-events --stack-name NameCardProd-staging --region ap-southeast-1 --query 'StackEvents[:5].[Timestamp,LogicalResourceId,ResourceStatus,ResourceStatusReason]' --output table)",
      "Bash(AWS_PROFILE=namecard-staging aws cloudformation describe-stack-events --stack-name NameCardProd-staging --region ap-southeast-1 --query 'StackEvents[?ResourceStatus==`CREATE_IN_PROGRESS`].[LogicalResourceId,ResourceType,ResourceStatus]' --output table)",
      "Bash(AWS_PROFILE=namecard-staging aws cloudformation describe-stacks --stack-name NameCardProd-staging --region ap-southeast-1 --query 'Stacks[0].[StackStatus,CreationTime]' --output table)",
      "Bash(AWS_PROFILE=namecard-staging aws cloudformation describe-stack-events --stack-name NameCardProd-staging --region ap-southeast-1 --query 'StackEvents[:10].[Timestamp,LogicalResourceId,ResourceStatus,ResourceType]' --output table)",
      "Bash(AWS_PROFILE=namecard-staging aws cloudformation describe-stack-events --stack-name NameCardProd-staging --region ap-southeast-1 --query 'StackEvents[?LogicalResourceId==`APIService8DA8F328`].[Timestamp,ResourceStatus,ResourceStatusReason]' --output table --max-items 3)",
      "Bash(AWS_PROFILE=namecard-staging aws cloudformation describe-stack-events --stack-name NameCardProd-staging --region ap-southeast-1 --query 'StackEvents[?contains(LogicalResourceId, `APIService`)][:3].[Timestamp,LogicalResourceId,ResourceStatus]' --output table)",
      "Bash(AWS_PROFILE=namecard-staging aws cloudformation describe-stack-events --stack-name NameCardProd-staging --region ap-southeast-1 --query 'StackEvents[:5].[Timestamp,LogicalResourceId,ResourceStatus]' --output table)",
      "Bash(AWS_PROFILE=namecard-staging aws ecr describe-repositories --region ap-southeast-1 --query 'repositories[?contains(repositoryName, `namecard`)].[repositoryName,repositoryUri,createdAt]' --output table)",
      "Bash(AWS_PROFILE=namecard-staging aws ecs describe-services --cluster namecard-cluster-staging --services namecard-api-staging --region ap-southeast-1 --query 'services[0].events[:5].[createdAt,message]' --output table)",
      "Bash(AWS_PROFILE=namecard-staging aws ecs describe-tasks --cluster namecard-cluster-staging --tasks 51ee5f5bcff84f268d08e29c438ef53f --region ap-southeast-1 --query 'tasks[0].lastStatus')",
      "Bash(AWS_PROFILE=namecard-staging aws ecs describe-tasks --cluster namecard-cluster-staging --tasks 51ee5f5bcff84f268d08e29c438ef53f --region ap-southeast-1 --query 'tasks[0].stoppedReason')",
      "Bash(AWS_PROFILE=namecard-staging aws secretsmanager describe-secret --secret-id namecard/database/staging --region ap-southeast-1 --query 'Name')",
      "Bash(AWS_PROFILE=namecard-staging aws secretsmanager get-secret-value --secret-id namecard/database/staging --region ap-southeast-1 --query 'SecretString' --output text)",
      "Bash(AWS_PROFILE=namecard-staging aws cloudformation describe-stack-events --stack-name NameCardProd-staging --region ap-southeast-1 --query 'StackEvents[?ResourceStatus==`DELETE_IN_PROGRESS`].[LogicalResourceId,ResourceType,ResourceStatus]' --output table)",
      "Bash(AWS_PROFILE=namecard-staging aws cloudformation describe-stack-events --stack-name NameCardProd-staging --region ap-southeast-1 --query 'StackEvents[?ResourceStatus==`DELETE_FAILED`].[LogicalResourceId,ResourceType,ResourceStatusReason]' --output table)",
      "Bash(AWS_PROFILE=namecard-staging aws cloudformation describe-stack-events --stack-name NameCardProd-staging --region ap-southeast-1 --query 'StackEvents[?ResourceStatus==`UPDATE_FAILED` || ResourceStatus==`CREATE_FAILED` || ResourceStatus==`ROLLBACK_FAILED`][:3].[LogicalResourceId,ResourceStatus,ResourceStatusReason]' --output table)",
      "Bash(AWS_PROFILE=namecard-staging aws ecs describe-task-definition --task-definition NameCardProdstagingAPIServiceTaskDef909B2074 --region ap-southeast-1 --query 'taskDefinition.containerDefinitions[0].secrets[?name==`DB_HOST`].valueFrom' --output text)",
      "Bash(AWS_PROFILE=namecard-staging aws secretsmanager list-secrets --region ap-southeast-1 --query 'SecretList[?contains(Name, `database/staging`)].Name' --output text)",
      "Bash(AWS_PROFILE=namecard-staging aws secretsmanager describe-secret --secret-id namecard/database/staging --region ap-southeast-1 --query 'ARN' --output text)",
      "Bash(AWS_PROFILE=namecard-staging aws ecs describe-task-definition --task-definition NameCardProdstagingAPIServiceTaskDef909B2074 --region ap-southeast-1 --query 'taskDefinition.executionRoleArn' --output text)",
      "Bash(AWS_PROFILE=namecard-staging aws iam list-attached-role-policies --role-name NameCardProd-staging-APIServiceTaskDefExecutionRole-Zbq05LJn4h1R --region ap-southeast-1 --query 'AttachedPolicies[].PolicyName' --output text)",
      "Bash(AWS_PROFILE=namecard-staging aws iam list-role-policies --role-name NameCardProd-staging-APIServiceTaskDefExecutionRole-Zbq05LJn4h1R --region ap-southeast-1 --query 'PolicyNames' --output text)",
      "Bash(AWS_PROFILE=namecard-staging aws iam get-role-policy --role-name NameCardProd-staging-APIServiceTaskDefExecutionRole-Zbq05LJn4h1R --policy-name APIServiceTaskDefExecutionRoleDefaultPolicyA9E1D13A --region ap-southeast-1 --query 'PolicyDocument.Statement[?Effect==`Allow`].Resource' --output json)",
      "Bash(AWS_PROFILE=namecard-staging aws secretsmanager get-secret-value --secret-id \"arn:aws:secretsmanager:ap-southeast-1:145006476362:secret:namecard/database/staging-uo7uAr:host::\" --region ap-southeast-1)",
      "Bash(AWS_PROFILE=namecard-staging cdk deploy:*)",
      "Bash(AWS_PROFILE=namecard-staging aws ecs update-service:*)",
      "Bash(AWS_PROFILE=namecard-staging aws s3 ls)",
      "Bash(AWS_PROFILE=namecard-staging aws cognito-idp list-user-pools --max-results 10)",
      "Bash(AWS_PROFILE=namecard-staging aws cognito-idp list-user-pool-clients --user-pool-id ap-southeast-1_bOA22s0Op)",
      "Bash(AWS_PROFILE=namecard-staging aws secretsmanager describe-secret:*)",
      "Bash(AWS_PROFILE=namecard-staging aws ecs describe-services --cluster namecard-cluster-staging --services namecard-api-staging --region ap-southeast-1 --query 'services[0].serviceName')",
      "Bash(AWS_PROFILE=namecard-staging aws ecs describe-task-definition --task-definition NameCardProdstagingAPIServiceTaskDef909B2074 --region ap-southeast-1 --query 'taskDefinition.containerDefinitions[0].environment' --output json)",
      "Bash(AWS_PROFILE=namecard-staging aws elasticache describe-cache-clusters --cache-cluster-id namecard-redis-staging --region ap-southeast-1 --query 'CacheClusters[0].RedisEndpoint.Address' --output text)",
      "Bash(AWS_PROFILE=namecard-staging aws elasticache describe-cache-clusters --region ap-southeast-1 --query 'CacheClusters[?contains(CacheClusterId, `namecard`)].CacheNodeCreateTime' --output table)",
      "Bash(AWS_PROFILE=namecard-staging aws ecs register-task-definition --region ap-southeast-1 --cli-input-json file:///tmp/new-task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)",
      "Bash(AWS_PROFILE=namecard-staging aws cloudformation describe-stacks --stack-name NameCardProd-staging --region ap-southeast-1 --query 'Stacks[0].Outputs' --output table)",
      "Bash(AWS_PROFILE=namecard-staging aws cloudformation describe-stacks --stack-name NameCardInfra-staging --region ap-southeast-1 --query 'Stacks[0].Outputs' --output table)",
      "Bash(npm ci:*)",
      "Bash(AWS_PROFILE=namecard-staging npx cdk deploy NameCardProd-staging --require-approval never)",
      "Bash(AWS_PROFILE=namecard-staging npx cdk list)",
      "Bash(AWS_PROFILE=namecard-staging npx cdk deploy NameCardProd-staging --context environment=staging --require-approval never)",
      "Bash(AWS_PROFILE=namecard-staging npx cdk deploy NameCardProd-staging --context environment=staging --require-approval never --outputs-file outputs.json)",
      "Bash(AWS_PROFILE=namecard-staging aws lambda invoke --function-name namecard-migration-staging --region ap-southeast-1 --payload '{\"\"action\"\":\"\"migrate\"\",\"\"source\"\":\"\"testing\"\"}' --cli-binary-format raw-in-base64-out migration-test-response.json)",
      "Bash(AWS_PROFILE=namecard-staging aws logs describe-log-groups --log-group-name-prefix \"/aws/lambda/namecard-migration-staging\" --region ap-southeast-1)",
      "Bash(AWS_PROFILE=namecard-staging aws logs describe-log-streams --log-group-name \"/aws/lambda/namecard-migration-staging\" --region ap-southeast-1 --order-by LastEventTime --descending --limit 1)",
      "Bash(AWS_PROFILE=namecard-staging aws logs get-log-events --log-group-name \"/aws/lambda/namecard-migration-staging\" --log-stream-name \"2025/08/12/[$LATEST]179bc8ac04804e678257a38740e4c6da\" --region ap-southeast-1)",
      "Bash(AWS_PROFILE=namecard-staging aws lambda invoke --function-name namecard-migration-staging --region ap-southeast-1 --payload '{\"\"action\"\":\"\"migrate\"\",\"\"source\"\":\"\"testing-fixed\"\"}' --cli-binary-format raw-in-base64-out migration-test-response-2.json)",
      "Bash(AWS_PROFILE=namecard-staging aws ecs describe-task-definition --task-definition NameCardProdstagingAPIServiceTaskDef909B2074 --region ap-southeast-1 --query 'taskDefinition.{family:family,networkMode:networkMode,requiresCompatibilities:requiresCompatibilities,cpu:cpu,memory:memory,executionRoleArn:executionRoleArn,taskRoleArn:taskRoleArn}' --output json)",
      "Bash(npx tsc:*)",
      "Bash(gh secret set:*)",
      "Bash(gh secret:*)",
      "Bash(gh workflow run:*)",
      "Bash(AWS_PROFILE=namecard-staging aws s3api list-buckets --query 'Buckets[?contains(Name, `namecard`)].Name' --output text)",
      "Bash(gh workflow:*)",
      "Bash(gh run list:*)",
      "Bash(gh run view:*)",
      "Bash(AWS_PROFILE=namecard-staging aws cloudformation describe-stacks --stack-name NameCardFrontend-staging --region ap-southeast-1 --query 'Stacks[0].Outputs' --output table)",
      "Bash(psql:*)",
      "Bash(open:*)",
      "Bash(gh pr view:*)",
      "Bash(gh issue create:*)"
    ],
    "deny": []
  }
}