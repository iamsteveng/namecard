services:
  postgres:
    image: postgres:15-alpine
    container_name: namecard-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: namecard_dev
      POSTGRES_USER: namecard_user
      POSTGRES_PASSWORD: namecard_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - namecard_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U namecard_user -d namecard_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_test:
    image: postgres:15-alpine
    container_name: namecard-postgres-test
    restart: unless-stopped
    environment:
      POSTGRES_DB: namecard_test
      POSTGRES_USER: namecard_user
      POSTGRES_PASSWORD: namecard_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    networks:
      - namecard_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U namecard_user -d namecard_test"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: namecard-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - namecard_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  localstack:
    image: localstack/localstack:latest
    container_name: namecard-localstack
    restart: unless-stopped
    environment:
      - SERVICES=s3,cognito-idp,textract,lambda,sts,iam
      - AWS_DEFAULT_REGION=us-east-1
      - EDGE_PORT=4566
      - PERSISTENCE=1
      - DEBUG=${LOCALSTACK_DEBUG-0}
      - DOCKER_HOST=unix:///var/run/docker.sock
      - S3_BUCKET_NAME=namecard-local-bucket
      - COGNITO_USER_POOL_NAME=namecard-local-pool
      - COGNITO_USER_POOL_CLIENT_NAME=namecard-local-client
    ports:
      - "4566:4566"
    volumes:
      - localstack_data:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock
      - ./infra/localstack/init-scripts:/etc/localstack/init/ready.d
    networks:
      - namecard_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 20s
      timeout: 10s
      retries: 5

  api:
    build:
      context: .
      dockerfile: services/api/Dockerfile
    container_name: namecard-api
    restart: unless-stopped
    ports:
      - "3001:3001"
    command: >
      sh -c "node services/api/dist/server.js"
    env_file:
      - services/api/.env
      - services/api/.env.localstack
    environment:
      # Override specific values for Docker container networking
      - DATABASE_URL=postgresql://namecard_user:namecard_password@postgres:5432/namecard_dev
      - REDIS_URL=redis://redis:6379
      - USE_LOCALSTACK=true
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_ENDPOINT_URL=http://localstack:4566
      - S3_ENDPOINT_URL=http://localstack:4566
      - S3_FORCE_PATH_STYLE=1
      - COGNITO_ENDPOINT_URL=http://localstack:4566
      - TEXTRACT_ENDPOINT_URL=http://localstack:4566
      - LOCALSTACK_HOST=localstack
    networks:
      - namecard_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: .
      dockerfile: services/web/Dockerfile
    container_name: namecard-frontend
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      - VITE_API_URL=http://localhost:3001
      - VITE_APP_NAME=NameCard Scanner
      - VITE_APP_VERSION=1.0.0
      - NODE_ENV=production
    networks:
      - namecard_network
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  postgres_test_data:
    driver: local
  redis_data:
    driver: local
  localstack_data:
    driver: local

networks:
  namecard_network:
    driver: bridge
