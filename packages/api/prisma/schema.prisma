// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile data
model User {
  id          String @id @default(cuid())
  cognitoId   String @unique @map("cognito_id")
  email       String @unique
  name        String?
  avatarUrl   String? @map("avatar_url")
  preferences Json    @default("{}")
  
  // Relations
  cards Card[]
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

// Main card model for business card information
model Card {
  id                  String  @id @default(cuid())
  userId              String  @map("user_id")
  originalImageUrl    String  @map("original_image_url")
  processedImageUrl   String? @map("processed_image_url")
  extractedText       String? @map("extracted_text")
  confidence          Float?  @db.Real
  
  // Extracted information fields
  name     String?
  title    String?
  company  String?
  email    String?
  phone    String?
  address  String?
  website  String?
  
  // Metadata and enrichment
  notes                 String?
  tags                  String[]
  scanDate              DateTime? @map("scan_date") @db.Date
  lastEnrichmentDate    DateTime? @map("last_enrichment_date")
  
  // Relations
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  companies      CardCompany[]
  calendarEvents CalendarEvent[]
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("cards")
  @@index([userId])
  @@index([company])
  @@index([name])
  @@index([email])
  @@index([scanDate])
}

// Company information for data enrichment
model Company {
  id           String  @id @default(cuid())
  name         String  @unique
  industry     String?
  size         String?
  headquarters String?
  website      String?
  description  String?
  logoUrl      String? @map("logo_url")
  
  // Relations
  cards        CardCompany[]
  newsArticles NewsArticle[]
  
  lastUpdated DateTime @default(now()) @map("last_updated")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("companies")
  @@index([name])
}

// Junction table for card-company relationships
model CardCompany {
  cardId    String @map("card_id")
  companyId String @map("company_id")
  
  card    Card    @relation(fields: [cardId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([cardId, companyId])
  @@map("card_companies")
}

// Calendar events for meeting context
model CalendarEvent {
  id               String    @id @default(cuid())
  cardId           String    @map("card_id")
  externalEventId  String?   @map("external_event_id")
  title            String
  eventDate        DateTime? @map("event_date")
  location         String?
  attendees        String[]
  source           String    // 'google', 'outlook', 'manual'
  
  // Relations
  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now()) @map("created_at")

  @@map("calendar_events")
}

// News articles for company research
model NewsArticle {
  id            String    @id @default(cuid())
  companyId     String    @map("company_id")
  title         String
  summary       String?
  url           String?
  publishedDate DateTime? @map("published_date")
  source        String?
  
  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now()) @map("created_at")

  @@map("news_articles")
  @@index([companyId, publishedDate(sort: Desc)])
}